<?php

namespace commons\models\system;


use Kaadon\ThinkBase\BaseClass\BaseModel;
use RedisException;
use think\db\exception\DataNotFoundException;
use think\db\exception\DbException;
use think\db\exception\ModelNotFoundException;
use think\Model;


class SystemConfig extends BaseModel
{
    public static function onAfterWrite(Model $model): void
    {
        parent::onAfterWrite($model); // TODO: Change the autogenerated stub
    }

    public function getGroupList(): array
    {
        return [['tab' => '基础配置', 'value' => 'site'], ['tab' => '上传配置', 'value' => 'upload']];
    }


    /**
     * @param string $group
     * @return array|mixed|string
     * @throws RedisException
     */
    public static function get_config_group(string $group): mixed
    {
        $configs = redisCacheGet("config:groups:{$group}s");
        if (empty($configs)) {
            $where = ['group' => $group];
            $value = self::where($where)->column('value', 'name');
            if (!empty($value)) {
                redisCacheSet("config:groups:{$group}s", $value);
            }
        } else {
            $value = $configs;
        }
        return $value;
    }

    /**
     * @param string $group
     * @param string $sign
     * @return mixed|null
     * @throws DataNotFoundException
     * @throws DbException
     * @throws ModelNotFoundException|RedisException
     */
    public static function get_config(string $group, string $sign)
    {
        $value = null;
        $config = redisCacheGet("config:{$group}_{$sign}");
        if (empty($config)) {
            $config = self::where([
                ['group', '=', $group],
                ['sign', '=', $sign]
            ])
                ->field("value")
                ->find();
            if (!empty($config) && !empty($config->value)) {
                $value = $config->value;
                redisCacheSet("config:{$group}_{$sign}", $config->value);
            }
        } else {
            $value = $config;
        }
        return $value;
    }


    /**
     * @param string $group
     * @param string $sign
     * @return bool
     * @throws DataNotFoundException
     * @throws DbException
     * @throws ModelNotFoundException|RedisException
     */
    public static function del_config(string $group, string $sign): bool
    {
        $config = (new self())->where([
            ['group', '=', $group],
            ['sign', '=', $sign]
        ])->find();
        if (!empty($config)) {
            $config->delete();
            redisCacheDel("config:{$group}_{$sign}");
        }
        return true;
    }


    /**
     * @param string $group
     * @param string $sign
     * @param string|int $value
     * @param array|null $options
     * @return bool
     * @throws DataNotFoundException
     * @throws DbException
     * @throws ModelNotFoundException
     */
    public static function set_config(string $group, string $sign, string|int $value, ?array $options): bool
    {
        $config = (new self())->where([
            ['group', '=', $group],
            ['sign', '=', $sign]
        ])->find();
        $insertData = [];
        if (isset($options['type'])) $insertData['type'] = $options['type'];
        if (isset($options['disabled'])) $insertData['disabled'] = $options['disabled'];
        if (isset($options['weigh'])) $insertData['weigh'] = $options['weigh'];
        if (isset($config['remark'])) $insertData['remark'] = $config['remark'];
        if (empty($config)) {
            $insertData['name'] = "{$group}_{$sign}";
            $insertData['group'] = "$group";
            $insertData['sign'] = "$sign";
        }
        $insertData['value'] = $value;
        $bool = $config->save($insertData);
        redisCacheSet("config:{$group}_{$sign}", $value);
        return (bool)$bool;
    }

}
